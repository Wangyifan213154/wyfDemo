const rippleEffect =
  '\x0a#define\x20PI\x203.1415936535\x0a\x0avec2\x20random(vec2\x20uv)\x0a{\x0a\x20\x20\x20\x20//\x20return\x20fract(vec2(dot(uv,\x20vec2(435.6,534.3)),\x20dot(uv,\x20vec2(358.463,246.3)))\x20);\x0a\x20\x20\x20\x20return\x20fract(vec2(dot(uv,\x20vec2(1.6,1.3)),\x20dot(uv,\x20vec2(1.463,1.3)))\x20);\x0a}\x0a\x0afloat\x20noise(vec2\x20uv)\x0a{\x0a\x0a\x20\x20\x20\x20//get\x20decimal\x20and\x20integer\x20portions\x20from\x20position\x0a\x20\x20\x20\x20vec2\x20i\x20=\x20floor(uv);\x0a\x20\x20\x20\x20vec2\x20f\x20=\x20fract(uv);\x0a\x0a\x20\x20\x20\x20//randomize\x20each\x20position\x20around\x20current\x20position\x0a\x20\x20\x20\x20vec2\x20a\x20=\x20random(i);\x0a\x20\x20\x20\x20vec2\x20b\x20=\x20random(i\x20+\x20vec2(1.0,\x200.0));\x0a\x20\x20\x20\x20vec2\x20c\x20=\x20random(i\x20+\x20vec2(0.0,\x201.0));\x0a\x20\x20\x20\x20vec2\x20d\x20=\x20random(i\x20+\x20vec2(1.0,\x201.0));\x0a\x0a\x20\x20\x20\x20//interpolate\x20decimal\x20position\x0a\x20\x20\x20\x20vec2\x20m\x20=\x20smoothstep(0.0,1.0,f);\x0a\x0a\x20\x20\x20\x20//apply\x20interpolation\x20to\x204\x20corners\x20and\x20return\x20result.\x0a\x20\x20\x20\x20return\x20mix(mix(dot(a,f),\x20dot(b,\x20f-vec2(1.0,0.0)),\x20m.x),\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20mix(dot(c,f\x20-\x20vec2(0.0,\x201.0)),\x20dot(d,f\x20-\x20vec2(1.0,1.0)),\x20m.x),\x20m.y);\x0a}\x0a\x0a\x0afloat\x20fbm(vec2\x20uv)\x0a{\x0a\x0a\x20\x20\x20\x20//store\x20the\x20final\x20value\x0a\x20\x20\x20\x20float\x20v\x20=\x200.;\x0a\x0a\x20\x20\x20\x20//store\x20the\x20current\x20amplitude\x20for\x20the\x20noise\x20texture\x0a\x20\x20\x20\x20//\x20float\x20a\x20=.9;\x0a\x20\x20\x20\x20float\x20a\x20=\x201.0-clamp((czm_frameNumber\x20/\x20120.0),0.0,1.0);\x0a\x0a\x20\x20\x20\x20for(int\x20i\x20=\x200;\x20i\x20<\x206;\x20i++)\x0a\x20\x20\x20\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20v\x20+=\x20a\x20*\x20noise(uv);\x0a\x20\x20\x20\x20\x20\x20\x20\x20a\x20*=\x200.5;\x0a\x20\x20\x20\x20\x20\x20\x20\x20uv\x20*=\x202.0;\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20return\x20v;\x0a}\x0a\x0avec2\x20rip(vec2\x20uv)\x0a{\x0a\x20\x20float\x20iTime\x20=\x20czm_frameNumber\x20/\x20120.0;\x0a\x20\x20\x20\x20return\x20uv\x20+\x20fbm(uv\x20+\x20iTime);\x0a}\x0a\x0auniform\x20sampler2D\x20colorTexture;\x20//输入的场景渲染照片\x0avarying\x20vec2\x20v_textureCoordinates;\x0a#define\x20EDGE\x20.2\x0avoid\x20main(void)\x20{\x0afloat\x20iTime\x20=\x20czm_frameNumber\x20/\x2020.0;\x0avec2\x20resolution\x20=\x20czm_viewport.zw;\x0avec2\x20uv\x20=\x20(gl_FragCoord.xy\x20/\x20resolution.xy);\x0a\x0a\x20\x20\x20\x20uv\x20=\x20rip(uv\x20*\x2010.0)/10.;\x0a\x20\x20\x20\x20//\x20Time\x20varying\x20pixel\x20color\x0a\x20\x20\x09vec4\x20col\x20=\x20texture2D(colorTexture,\x20uv);\x0a\x0a\x20\x20\x20\x20//\x20Output\x20to\x20screen\x0a\x20\x20\x20\x20vec4\x20fragColor\x20=\x20vec4(col);\x0a\x0agl_FragColor\x20=\x20fragColor;\x20//将效果和三维场景融合\x0a}'
const AFEffect =
  '\x0auniform\x20sampler2D\x20colorTexture;\x0avarying\x20vec2\x20v_textureCoordinates;\x0aconst\x20float\x20strength\x20=\x200.3;\x0aconst\x20float\x20PI\x20=\x203.141592653589793;\x0a\x0afloat\x20Linear_ease(in\x20float\x20begin,\x20in\x20float\x20change,\x20in\x20float\x20duration,\x20in\x20float\x20time)\x20{\x0a\x20\x20\x20\x20return\x20change\x20*\x20time\x20/\x20duration\x20+\x20begin;\x0a}\x0a\x0afloat\x20Exponential_easeInOut(in\x20float\x20begin,\x20in\x20float\x20change,\x20in\x20float\x20duration,\x20in\x20float\x20time)\x20{\x0a\x20\x20\x20\x20if\x20(time\x20==\x200.0)\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20begin;\x0a\x20\x20\x20\x20else\x20if\x20(time\x20==\x20duration)\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20begin\x20+\x20change;\x0a\x20\x20\x20\x20time\x20=\x20time\x20/\x20(duration\x20/\x202.0);\x0a\x20\x20\x20\x20if\x20(time\x20<\x201.0)\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20change\x20/\x202.0\x20*\x20pow(2.0,\x2010.0\x20*\x20(time\x20-\x201.0))\x20+\x20begin;\x0a\x20\x20\x20\x20return\x20change\x20/\x202.0\x20*\x20(-pow(2.0,\x20-10.0\x20*\x20(time\x20-\x201.0))\x20+\x202.0)\x20+\x20begin;\x0a}\x0a\x0afloat\x20Sinusoidal_easeInOut(in\x20float\x20begin,\x20in\x20float\x20change,\x20in\x20float\x20duration,\x20in\x20float\x20time)\x20{\x0a\x20\x20\x20\x20return\x20-change\x20/\x202.0\x20*\x20(cos(PI\x20*\x20time\x20/\x20duration)\x20-\x201.0)\x20+\x20begin;\x0a}\x0a\x0afloat\x20random(in\x20vec3\x20scale,\x20in\x20float\x20seed)\x20{\x0a\x20\x20\x20\x20return\x20fract(sin(dot(gl_FragCoord.xyz\x20+\x20seed,\x20scale))\x20*\x2043758.5453\x20+\x20seed);\x0a}\x0a\x0avec3\x20crossFade(in\x20vec2\x20uv,\x20in\x20float\x20dissolve)\x20{\x0a\x20\x20\x20\x20return\x20mix(texture2D(colorTexture,\x20uv).rgb,\x20texture2D(colorTexture,\x20uv).rgb,\x20dissolve);\x0a}\x0avoid\x20main(void)\x20{\x0a\x20\x20float\x20iTime\x20=\x20czm_frameNumber\x20/\x2030.0;\x0a\x20\x20vec2\x20resolution\x20=\x20czm_viewport.zw;\x0a\x20\x20vec2\x20texCoord\x20=\x20v_textureCoordinates;//fragCoord.xy\x20/\x20iResolution.xy;\x0a\x09float\x20progress\x20=\x20sin(iTime*0.5)\x20*\x200.5\x20+\x200.5;\x0a\x20\x20vec2\x20center\x20=\x20vec2(Linear_ease(0.5,\x200.0,\x201.0,\x20progress),0.5);\x0a\x20\x20float\x20dissolve\x20=\x20Exponential_easeInOut(0.0,\x201.0,\x201.0,\x20progress);\x0a\x0a\x20\x20float\x20strength\x20=\x20Sinusoidal_easeInOut(0.0,\x20strength,\x200.5,\x20progress);\x0a\x0a\x20\x20vec3\x20color\x20=\x20vec3(0.0);\x0a\x20\x20float\x20total\x20=\x200.0;\x0a\x20\x20vec2\x20toCenter\x20=\x20center\x20-\x20texCoord;\x0a\x0a\x20\x20float\x20offset\x20=\x20random(vec3(12.9898,\x2078.233,\x20151.7182),\x200.0)*0.5;\x0a\x0a\x20\x20for\x20(float\x20t\x20=\x200.0;\x20t\x20<=\x2020.0;\x20t++)\x20{\x0a\x20\x20\x20\x20\x20\x20float\x20percent\x20=\x20(t\x20+\x20offset)\x20/\x2020.0;\x0a\x20\x20\x20\x20\x20\x20float\x20weight\x20=\x201.0\x20*\x20(percent\x20-\x20percent\x20*\x20percent);\x0a\x20\x20\x20\x20\x20\x20color\x20+=\x20crossFade(texCoord\x20+\x20toCenter\x20*\x20percent\x20*\x20strength,\x20dissolve)\x20*\x20weight;\x0a\x20\x20\x20\x20\x20\x20total\x20+=\x20weight;\x0a\x20\x20}\x0a\x0a\x20\x20vec4\x20fragColor\x20=\x20vec4(color\x20/\x20total,\x201.0);\x0a\x0a\x20\x20gl_FragColor\x20=\x20fragColor;\x0a}'
const DPEffect =
  '\x0a#define\x20iTime\x20czm_frameNumber\x20/\x2050.0\x0a#define\x20iResolution\x20czm_viewport.zw\x0a#define\x20PI\x203.141592653589793\x0a#define\x20fragCoord\x20gl_FragCoord\x0auniform\x20sampler2D\x20colorTexture;\x20//输入的场景渲染照片\x0auniform\x20vec4\x20iMouse;\x0avarying\x20vec2\x20v_textureCoordinates;\x0a\x0a//\x20divisions\x20of\x20grid\x0aconst\x20float\x20repeats\x20=\x2010.;\x0a\x0a//\x20number\x20of\x20layers\x0aconst\x20float\x20layers\x20=\x205.;\x0a\x0a//\x20star\x20colours\x0aconst\x20vec3\x20blue\x20=\x20vec3(51.,64.,195.)/255.;\x0aconst\x20vec3\x20cyan\x20=\x20vec3(117.,250.,254.)/255.;\x0aconst\x20vec3\x20white\x20=\x20vec3(255.,255.,255.)/255.;\x0aconst\x20vec3\x20yellow\x20=\x20vec3(251.,245.,44.)/255.;\x0aconst\x20vec3\x20red\x20=\x20vec3(247,2.,20.)/255.;\x0a\x0a//\x20spectrum\x20function\x0avec3\x20spectrum(vec2\x20pos){\x0a\x20\x20\x20\x20pos.x\x20*=\x204.;\x0a\x20\x20\x20\x20vec3\x20outCol\x20=\x20vec3(0);\x0a\x20\x20\x20\x20if(\x20pos.x\x20>\x200.){\x0a\x20\x20\x20\x20\x20\x20\x20\x20outCol\x20=\x20mix(blue,\x20cyan,\x20fract(pos.x));\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20if(\x20pos.x\x20>\x201.){\x0a\x20\x20\x20\x20\x20\x20\x20\x20outCol\x20=\x20mix(cyan,\x20white,\x20fract(pos.x));\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20if(\x20pos.x\x20>\x202.){\x0a\x20\x20\x20\x20\x20\x20\x20\x20outCol\x20=\x20mix(white,\x20yellow,\x20fract(pos.x));\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20if(\x20pos.x\x20>\x203.){\x0a\x20\x20\x20\x20\x20\x20\x20\x20outCol\x20=\x20mix(yellow,\x20red,\x20fract(pos.x));\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20return\x201.-(pos.y\x20*\x20(1.-outCol));\x0a}\x0a\x0afloat\x20N21(vec2\x20p){\x0a\x20\x20\x20\x20p\x20=\x20fract(p*vec2(233.34,\x20851.73));\x0a\x20\x20\x20\x20p+=\x20dot(p,\x20p+23.45);\x0a\x20\x20\x20\x20return\x20fract(p.x*p.y);\x0a}\x0a\x0avec2\x20N22\x20(vec2\x20p){\x0a\x09float\x20n\x20=\x20N21(p);\x0a\x20\x20\x20\x20return\x20vec2\x20(n,\x20N21(p+n));\x0a}\x0a\x0amat2\x20scale(vec2\x20_scale){\x0a\x20\x20\x20\x20return\x20mat2(_scale.x,0.0,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x200.0,_scale.y);\x0a}\x0a\x0afloat\x20noise\x20(in\x20vec2\x20st)\x20{\x0a\x20\x20\x20\x20vec2\x20i\x20=\x20floor(st);\x0a\x20\x20\x20\x20vec2\x20f\x20=\x20fract(st);\x0a\x0a\x20\x20\x20\x20//\x20Four\x20corners\x20in\x202D\x20of\x20a\x20tile\x0a\x20\x20\x20\x20float\x20a\x20=\x20N21(i);\x0a\x20\x20\x20\x20float\x20b\x20=\x20N21(i\x20+\x20vec2(1.0,\x200.0));\x0a\x20\x20\x20\x20float\x20c\x20=\x20N21(i\x20+\x20vec2(0.0,\x201.0));\x0a\x20\x20\x20\x20float\x20d\x20=\x20N21(i\x20+\x20vec2(1.0,\x201.0));\x0a\x0a\x20\x20\x20\x20//\x20Smooth\x20Interpolation\x0a\x0a\x20\x20\x20\x20//\x20Cubic\x20Hermine\x20Curve.\x20\x20Same\x20as\x20SmoothStep()\x0a\x20\x20\x20\x20vec2\x20u\x20=\x20f*f*(3.0-2.0*f);\x0a\x0a\x20\x20\x20\x20//\x20Mix\x204\x20coorners\x20percentages\x0a\x20\x20\x20\x20return\x20mix(a,\x20b,\x20u.x)\x20+\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(c\x20-\x20a)*\x20u.y\x20*\x20(1.0\x20-\x20u.x)\x20+\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20(d\x20-\x20b)\x20*\x20u.x\x20*\x20u.y;\x0a}\x0a\x0afloat\x20perlin2(vec2\x20uv,\x20int\x20octaves,\x20float\x20pscale){\x0a\x20\x20\x20\x20float\x20col\x20=\x201.;\x0a\x20\x20\x20\x20float\x20initScale\x20=\x204.;\x0a\x20\x20\x20\x20for\x20(\x20int\x20l=0;\x20l\x20<\x203;\x20l++){\x0a\x20\x20\x20\x20\x20\x20\x20\x20float\x20val\x20=\x20noise(uv*initScale);\x0a\x20\x20\x20\x20\x20\x20\x20\x20if\x20(col\x20<=\x200.01){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20col\x20=\x200.;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20val\x20-=\x200.01;\x0a\x20\x20\x20\x20\x20\x20\x20\x20val\x20*=\x200.5;\x0a\x20\x20\x20\x20\x20\x20\x20\x20col\x20*=\x20val;\x0a\x20\x20\x20\x20\x20\x20\x20\x20initScale\x20*=\x20pscale;\x0a\x20\x20\x20\x20}\x0a\x20\x09return\x20col;\x0a}\x0a\x0avec3\x20stars(vec2\x20uv,\x20float\x20offset){\x0a\x0a\x20\x20\x20\x20float\x20timeScale\x20=\x20-(iTime\x20+\x20offset)\x20/\x20layers;\x0a\x0a\x20\x20\x20\x20float\x20trans\x20=\x20fract(timeScale);\x0a\x0a\x20\x20\x20\x20float\x20newRnd\x20=\x20floor(timeScale);\x0a\x0a\x20\x20\x20\x20vec3\x20col\x20=\x20vec3(0.);\x0a\x0a\x0a\x20\x20\x20\x20//\x20translate\x20uv\x20then\x20scale\x20for\x20center\x0a\x20\x20\x20\x20uv\x20-=\x20vec2(0.5);\x0a\x20\x20\x20\x20uv\x20=\x20scale(\x20vec2(trans)\x20)\x20*\x20uv;\x0a\x20\x20\x20\x20uv\x20+=\x20vec2(0.5);\x0a\x0a\x20\x20\x20\x20//\x20create\x20square\x20aspect\x20ratio\x0a\x20\x20\x20\x20uv.x\x20*=\x20iResolution.x\x20/\x20iResolution.y;\x0a\x0a\x20\x20\x20\x20//\x20add\x20nebula\x20colours\x0a\x20\x20\x20\x20float\x20colR\x20=\x20N21(vec2(offset+newRnd));\x0a\x20\x20\x20\x20float\x20colB\x20=\x20N21(vec2(offset+newRnd*123.));\x0a\x0a\x20\x20\x20\x20//\x20generate\x20perlin\x20noise\x20nebula\x20on\x20every\x20third\x20layer\x0a\x20\x20\x20\x20if\x20(mod(offset,3.)\x20==\x200.){\x0a\x20\x20\x20\x20\x09float\x20perl\x20=\x20perlin2(uv+offset+newRnd,3,2.);\x0a\x20\x20\x20\x20\x09col\x20+=\x20vec3(perl*colR,perl*0.1,perl*colB);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20//\x20create\x20boxes\x0a\x20\x20\x20\x20uv\x20*=\x20repeats;\x0a\x0a\x20\x20\x20\x20//\x20get\x20position\x0a\x20\x20\x20\x20vec2\x20ipos\x20=\x20floor(uv);\x0a\x0a\x20\x20\x20\x20//\x20return\x20uv\x20as\x200\x20to\x201\x0a\x20\x20\x20\x20uv\x20=\x20fract(uv);\x0a\x0a\x20\x20\x20\x20//\x20calculate\x20random\x20xy\x20and\x20size\x0a\x20\x20\x20\x20vec2\x20rndXY\x20=\x20N22(newRnd\x20+\x20ipos*(offset+1.))*0.9+0.05;\x0a\x20\x20\x20\x20float\x20rndSize\x20=\x20N21(ipos)*100.+200.;\x0a\x0a\x0a\x20\x20\x20\x20vec2\x20j\x20=\x20(rndXY\x20-\x20uv)*rndSize;\x0a\x20\x20\x20\x20float\x20sparkle\x20=\x201./dot(j,j);\x0a\x0a\x20\x20\x20\x20col\x20+=\x20spectrum(fract(rndXY*newRnd*ipos))\x20*\x20vec3(sparkle);\x0a\x0a\x0a\x09//\x20visualize\x20layers\x0a\x20\x20\x20\x20/*if\x20((uv.x\x20>\x209.\x20||\x20uv.y\x20>\x200.99)\x20&&\x20ipos.y\x20==\x208.){\x0a\x20\x20\x20\x20\x20\x20\x20\x20col\x20+=\x20vec3(1.,0.,0.)*smoothstep(1.,0.5,trans);\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20if\x20(mod(offset,3.)\x20==\x200.){\x0a\x20\x20\x20\x20\x09if\x20(uv.x\x20>\x200.99\x20||\x20uv.y\x20>\x200.99){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x09col\x20+=\x20vec3(1.,0.,0.)*smoothstep(0.2,0.1,trans);\x0a\x20\x20\x20\x20\x09}\x0a\x20\x20\x20\x20}*/\x0a\x0a\x20\x20\x20\x09col\x20*=\x20smoothstep(1.,0.8,trans);\x0a\x20\x20\x20\x20col\x20*=\x20smoothstep(0.,0.1,trans);\x0a\x20\x20\x20\x20return\x20col;\x0a\x0a}\x0avoid\x20main(void)\x20{\x0a\x09//\x20vec2\x20uv\x20=\x20gl_FragCoord.xy\x20/\x20resolution.xy;\x0a\x20\x20//\x20vec2\x20uv\x20=\x20(gl_FragCoord.xy\x20*\x202.\x20-\x20resolution.xy)\x20/\x20min(resolution.x,\x20resolution.y);\x0a\x0a\x20\x20//\x20vec2\x20uv\x20=\x20v_textureCoordinates;\x0a\x0a\x20\x20//\x20Normalized\x20pixel\x20coordinates\x20(from\x200\x20to\x201)\x0a\x20\x20\x20\x20vec2\x20uv\x20=\x20fragCoord.xy/iResolution.xy;\x0a\x0a\x20\x20\x20\x20vec3\x20col\x20=\x20vec3(0.);\x0a\x0a\x20\x20\x20\x20for\x20(float\x20i\x20=\x200.;\x20i\x20<\x20layers;\x20i++\x20){\x0a\x20\x20\x20\x20\x09col\x20+=\x20stars(uv,\x20i);\x0a\x20\x20\x20\x20}\x0a\x0a\x0a\x20\x20\x20\x20//\x20Output\x20to\x20screen\x0a\x20\x20\x20\x20vec4\x20fragColor\x20=\x20vec4(col,1.0);\x0a\x0a\x20\x20\x20\x20vec4\x20textureColor\x20=\x20\x20texture2D(colorTexture,v_textureCoordinates);\x0a\x20\x20\x20\x20vec4\x20finalColor\x20=\x20mix(textureColor,fragColor,0.3);\x0a\x0a\x20\x20\x20\x20gl_FragColor\x20=\x20finalColor;\x0a}'
const pageDrop =
  '\x0a#define\x20unDuration\x2010.0\x0auniform\x20sampler2D\x20colorTexture;\x0avarying\x20vec2\x20v_textureCoordinates;\x0aconst\x20float\x20n\x20=\x208.;\x20\x20\x0aconst\x20float\x20s\x20=\x201.\x20/\x20n;\x20\x0aconst\x20float\x20pi\x20=\x203.14159265358979;\x0aconst\x20float\x20_90\x20=\x200.5\x20*\x20pi;\x0avoid\x20main(void)\x20{\x0a\x20\x20\x20\x20float\x20iTime\x20=\x20czm_frameNumber\x20/\x2050.0;\x0a\x20\x20\x20\x20vec2\x20resolution\x20=\x20czm_viewport.zw;\x0a\x09//\x20vec2\x20uv\x20=\x20gl_FragCoord.xy\x20/\x20resolution.xy;\x0a\x20\x20vec2\x20uv\x20=\x20(gl_FragCoord.xy\x20*\x202.\x20-\x20resolution.xy)\x20/\x20min(resolution.x,\x20resolution.y);\x0a\x0a\x20\x20vec2\x20\x20p\x20=\x20v_textureCoordinates;\x0a\x20\x20\x20\x20p.y\x20=\x201.\x20-\x20p.y;\x20//\x20Shader\x20Toy\x0a\x20\x20\x20\x20float\x20t\x20=\x20min(\x201.,\x202.\x20*\x20mod(iTime,0.5*unDuration)\x20/\x20unDuration);\x20//\x20repeat\x0a\x20\x20\x20\x20vec2\x20\x20b\x20=\x20mod(\x20p,\x20s\x20);\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20offset\x20in\x20box\x0a\x20\x20\x20\x20vec2\x20\x20i\x20=\x20floor(\x20p\x20/\x20s\x20);\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20box#\x0a\x20\x20\x20\x20float\x20cells\x20=\x20(2.*n\x20-\x202.);\x0a\x20\x20\x20\x20float\x20delay\x20=\x20(i.x\x20+\x20i.y)\x20/\x20cells;\x0a\x20\x20\x20\x20t\x20-=\x200.5*delay;\x0a\x20\x20\x20\x20float\x20a\x20=\x20_90*t;\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x2090\x20degrees\x20*\x20t\x0a\x20\x20\x20\x20float\x20rate\x20=\x20(cells\x20-\x20(i.x\x20+\x20i.y))\x20/\x20cells;\x0a\x20\x20\x20\x20rate\x20*=\x20n/2.;\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20how\x20fast\x20first\x20cell\x20turns\x0a\x20\x20\x20\x20rate\x20+=\x20n/2.;\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20how\x20fast\x20last\x20cell\x20turns:\x20min\x202.0\x0a\x20\x20\x20\x20a\x20*=\x20rate;\x0a\x20\x20\x20\x20a\x20=\x20min(\x20_90,\x20a\x20);\x0a\x20\x20\x20\x20a\x20=\x20max(\x200.0,\x20a\x20);\x0a\x20\x20\x20\x20float\x20ca\x20=\x20cos(a);\x0a\x20\x20\x20\x20float\x20sa\x20=\x20sin(a);\x0a\x20\x20\x20\x20const\x20float\x20w\x20=\x200.5*s;\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20half\x20box\x20size\x20in\x20world\x20space\x0a\x20\x20\x20\x20vec2\x20l\x20=\x20vec2(\x20-w,\x20\x20w\x20);\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20pre\x20top-left\x0a\x20\x20\x20\x20vec2\x20m\x20=\x20vec2(\x20\x20w,\x20\x20w\x20);\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20pre\x20top-right\x0a\x20\x20\x20\x20vec2\x20r\x20=\x20vec2(\x20\x20w,\x20-w\x20);\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20pre\x20bot-right\x0a\x20\x20\x20\x20vec2\x20L\x20=\x20vec2(\x20l.x*ca\x20-\x20l.y*sa,\x20l.x*sa+\x20l.y*ca\x20);//\x20post\x20top-left\x0a\x20\x20\x20\x20vec2\x20M\x20=\x20vec2(\x20m.x*ca\x20-\x20m.y*sa,\x20m.x*sa+\x20m.y*ca\x20);//\x20post\x20top-right\x0a\x20\x20\x20\x20vec2\x20R\x20=\x20vec2(\x20r.x*ca\x20-\x20r.y*sa,\x20r.x*sa+\x20r.y*ca\x20);\x20//\x20post\x20bot-right\x0a\x20\x20\x20\x20float\x20Fx\x20=\x20b.x\x20-\x20w;\x0a\x20\x20\x20\x20vec4\x20fragColor;\x0a\x20\x20\x20\x20if(\x20Fx\x20<\x20M.x\x20)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20float\x20dx\x20=\x20Fx\x20-\x20L.x;\x0a\x20\x20\x20\x20\x20\x20\x20\x20float\x20dy\x20=\x20tan(a)*dx;\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20y1-y0=m(x1-x0)\x0a\x20\x20\x20\x20\x20\x20\x20\x20float\x20d\x20=\x20sqrt(\x20(dx*dx)\x20+\x20(dy*dy)\x20);\x0a\x20\x20\x20\x20\x20\x20\x20\x20p.x\x20=\x20i.x*s\x20+\x20d;\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20fragColor\x20=\x20mix(texture2D(colorTexture,p),vec4(0.0,1.0,1.0,1.0),0.1);\x0a\x20\x20\x20\x20\x20\x20\x20\x20fragColor\x20=\x20texture2D(colorTexture,p);\x0a\x20\x20\x20\x20}\x20else\x20{\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20image2\x20rotating\x20towards\x0a\x20\x20\x20\x20\x20\x20\x20\x20float\x20ex\x20=\x20Fx\x20-\x20M.x;\x0a\x20\x20\x20\x20\x20\x20\x20\x20float\x20ey\x20=\x20tan(a\x20+\x20_90)*ex;\x0a\x20\x20\x20\x20\x20\x20\x20\x20float\x20e\x20=\x20sqrt(\x20(ex*ex)\x20+\x20(ey*ey)\x20);\x0a\x20\x20\x20\x20\x20\x20\x20\x20p.x\x20=\x20i.x*s\x20+\x20e;\x0a\x20\x20\x20\x20\x20\x20\x20\x20fragColor\x20=\x20texture2D(colorTexture,p);\x0a\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20gl_FragColor\x20=\x20fragColor;\x0a}'
const pageGrid = `
uniform sampler2D colorTexture;
varying vec2 v_textureCoordinates;
#define PI 3.141592
uniform vec2 iMouse;
// initial "paint melt" speed
const float START_SPEED  = 2.7;
// texture melting off screen speed
const float MELT_SPEED   = 1.;
// melt effect restart interval (seconds)
const float RESTART_IVAL = 3.;

void main(void) {
  float iTime = czm_frameNumber / 100.0;
  vec2 resolution = czm_viewport.zw;

  vec2 uv = v_textureCoordinates;
	vec2 p = uv;

    float t = mod(iTime, RESTART_IVAL);
    // flip textures every second melt
    float rt = mod(iTime, 2. * RESTART_IVAL);
    bool texFlip = rt > .0 && rt < RESTART_IVAL;

    float d = START_SPEED * t;
    if(d > 1.) d = 1.;

    p.y += d * 0.35 * fract(sin(dot(vec2(p.x, .0), vec2(12.9898, 78.233)))* 43758.5453);

    // now move entire melted texture offscreen
    if(d == 1.)
        p.y += MELT_SPEED * (t - d/START_SPEED);
    vec4 fragColor;
    if(texFlip)
        fragColor = texture2D(colorTexture, p);
    else
        fragColor = texture2D(colorTexture, p);

    if(p.y > 1.)
    {
        if(texFlip)
        	fragColor = texture2D(colorTexture, uv);
        else
            fragColor = texture2D(colorTexture, uv);
    }

    gl_FragColor = fragColor;
`
const bloomAll =
  '\x0a#define\x20iTime\x20czm_frameNumber\x20/\x20150.0\x0a#define\x20iResolution\x20czm_viewport.zw\x0a#define\x20PI\x203.141592653589793\x0a#define\x20fragCoord\x20gl_FragCoord\x0auniform\x20sampler2D\x20colorTexture;\x0auniform\x20vec4\x20iMouse;\x0auniform\x20float\x20bloomVal;\x0avarying\x20vec2\x20v_textureCoordinates;\x0aconst\x20float\x20blurSize\x20=\x201.0/512.0;\x0aconst\x20float\x20intensity\x20=\x200.35;\x0avoid\x20main(void)\x20{\x0a\x20\x20vec2\x20p\x20=\x20fragCoord.xy\x20/\x20iResolution.xy\x20-.5;\x0a\x20\x20vec4\x20sum\x20=\x20vec4(0);\x0a\x20\x20\x20vec2\x20texcoord\x20=\x20fragCoord.xy/iResolution.xy;\x0a\x20\x20\x20int\x20j;\x0a\x20\x20\x20int\x20i;\x0a\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x\x20-\x204.0*blurSize,\x20v_textureCoordinates.y))\x20*\x200.05;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x\x20-\x203.0*blurSize,\x20v_textureCoordinates.y))\x20*\x200.09;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x\x20-\x202.0*blurSize,\x20v_textureCoordinates.y))\x20*\x200.12;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x\x20-\x20blurSize,\x20v_textureCoordinates.y))\x20*\x200.15;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x,\x20v_textureCoordinates.y))\x20*\x200.16;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x\x20+\x20blurSize,\x20v_textureCoordinates.y))\x20*\x200.15;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x\x20+\x202.0*blurSize,\x20v_textureCoordinates.y))\x20*\x200.12;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x\x20+\x203.0*blurSize,\x20v_textureCoordinates.y))\x20*\x200.09;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x\x20+\x204.0*blurSize,\x20v_textureCoordinates.y))\x20*\x200.05;\x0a\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x,\x20v_textureCoordinates.y\x20-\x204.0*blurSize))\x20*\x200.05;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x,\x20v_textureCoordinates.y\x20-\x203.0*blurSize))\x20*\x200.09;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x,\x20v_textureCoordinates.y\x20-\x202.0*blurSize))\x20*\x200.12;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x,\x20v_textureCoordinates.y\x20-\x20blurSize))\x20*\x200.15;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x,\x20v_textureCoordinates.y))\x20*\x200.16;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x,\x20v_textureCoordinates.y\x20+\x20blurSize))\x20*\x200.15;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x,\x20v_textureCoordinates.y\x20+\x202.0*blurSize))\x20*\x200.12;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x,\x20v_textureCoordinates.y\x20+\x203.0*blurSize))\x20*\x200.09;\x0a\x20\x20\x20sum\x20+=\x20texture2D(colorTexture,\x20vec2(v_textureCoordinates.x,\x20v_textureCoordinates.y\x20+\x204.0*blurSize))\x20*\x200.05;\x0a\x0a\x20\x20\x20//increase\x20blur\x20with\x20intensity!\x0a\x20\x20\x20vec4\x20fragColor;\x0a\x20\x20\x20fragColor\x20=\x20sum\x20*\x20sin(bloomVal)+\x20texture2D(colorTexture,\x20v_textureCoordinates);\x0a\x20\x20//\x20\x20if(sin(iTime)\x20>\x200.0)\x0a\x20\x20//\x20\x20\x20\x20\x20\x20fragColor\x20=\x20sum\x20*\x20sin(iTime)+\x20texture2D(colorTexture,\x20v_textureCoordinates);\x0a\x20\x20//\x20\x20else\x0a\x09//\x20\x20\x20\x20fragColor\x20=\x20sum\x20*\x20-sin(iTime)+\x20texture2D(colorTexture,\x20v_textureCoordinates);\x0a\x0a\x20\x20\x20\x20gl_FragColor\x20=\x20fragColor;\x0a}'
export { rippleEffect, AFEffect, DPEffect, pageDrop, pageGrid, bloomAll }
